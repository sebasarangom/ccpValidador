/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 17846.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 3.0], [0.6, 3.0], [0.7, 3.0], [0.8, 3.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 3.0], [1.9, 3.0], [2.0, 3.0], [2.1, 3.0], [2.2, 3.0], [2.3, 4.0], [2.4, 4.0], [2.5, 4.0], [2.6, 4.0], [2.7, 4.0], [2.8, 4.0], [2.9, 4.0], [3.0, 4.0], [3.1, 4.0], [3.2, 4.0], [3.3, 4.0], [3.4, 4.0], [3.5, 4.0], [3.6, 4.0], [3.7, 4.0], [3.8, 4.0], [3.9, 4.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 4.0], [4.4, 5.0], [4.5, 5.0], [4.6, 5.0], [4.7, 5.0], [4.8, 5.0], [4.9, 5.0], [5.0, 5.0], [5.1, 5.0], [5.2, 5.0], [5.3, 5.0], [5.4, 5.0], [5.5, 5.0], [5.6, 5.0], [5.7, 5.0], [5.8, 5.0], [5.9, 5.0], [6.0, 5.0], [6.1, 5.0], [6.2, 5.0], [6.3, 5.0], [6.4, 5.0], [6.5, 5.0], [6.6, 5.0], [6.7, 5.0], [6.8, 5.0], [6.9, 5.0], [7.0, 5.0], [7.1, 5.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 7.0], [11.6, 7.0], [11.7, 7.0], [11.8, 7.0], [11.9, 7.0], [12.0, 7.0], [12.1, 7.0], [12.2, 7.0], [12.3, 7.0], [12.4, 7.0], [12.5, 7.0], [12.6, 7.0], [12.7, 7.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 8.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 9.0], [15.6, 9.0], [15.7, 9.0], [15.8, 9.0], [15.9, 9.0], [16.0, 9.0], [16.1, 9.0], [16.2, 9.0], [16.3, 9.0], [16.4, 9.0], [16.5, 9.0], [16.6, 9.0], [16.7, 9.0], [16.8, 9.0], [16.9, 9.0], [17.0, 9.0], [17.1, 9.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 10.0], [17.6, 10.0], [17.7, 10.0], [17.8, 10.0], [17.9, 10.0], [18.0, 10.0], [18.1, 10.0], [18.2, 10.0], [18.3, 10.0], [18.4, 10.0], [18.5, 10.0], [18.6, 10.0], [18.7, 10.0], [18.8, 10.0], [18.9, 10.0], [19.0, 10.0], [19.1, 11.0], [19.2, 11.0], [19.3, 11.0], [19.4, 11.0], [19.5, 11.0], [19.6, 11.0], [19.7, 11.0], [19.8, 11.0], [19.9, 11.0], [20.0, 11.0], [20.1, 11.0], [20.2, 11.0], [20.3, 11.0], [20.4, 12.0], [20.5, 12.0], [20.6, 12.0], [20.7, 12.0], [20.8, 12.0], [20.9, 12.0], [21.0, 12.0], [21.1, 12.0], [21.2, 12.0], [21.3, 12.0], [21.4, 12.0], [21.5, 12.0], [21.6, 12.0], [21.7, 13.0], [21.8, 13.0], [21.9, 13.0], [22.0, 13.0], [22.1, 13.0], [22.2, 13.0], [22.3, 13.0], [22.4, 13.0], [22.5, 13.0], [22.6, 13.0], [22.7, 13.0], [22.8, 14.0], [22.9, 14.0], [23.0, 14.0], [23.1, 14.0], [23.2, 14.0], [23.3, 14.0], [23.4, 14.0], [23.5, 15.0], [23.6, 15.0], [23.7, 15.0], [23.8, 15.0], [23.9, 15.0], [24.0, 15.0], [24.1, 15.0], [24.2, 16.0], [24.3, 16.0], [24.4, 16.0], [24.5, 16.0], [24.6, 16.0], [24.7, 16.0], [24.8, 16.0], [24.9, 16.0], [25.0, 17.0], [25.1, 17.0], [25.2, 17.0], [25.3, 17.0], [25.4, 17.0], [25.5, 17.0], [25.6, 18.0], [25.7, 18.0], [25.8, 19.0], [25.9, 19.0], [26.0, 19.0], [26.1, 19.0], [26.2, 19.0], [26.3, 19.0], [26.4, 20.0], [26.5, 20.0], [26.6, 20.0], [26.7, 20.0], [26.8, 21.0], [26.9, 21.0], [27.0, 22.0], [27.1, 22.0], [27.2, 22.0], [27.3, 22.0], [27.4, 23.0], [27.5, 23.0], [27.6, 23.0], [27.7, 24.0], [27.8, 25.0], [27.9, 26.0], [28.0, 26.0], [28.1, 27.0], [28.2, 28.0], [28.3, 28.0], [28.4, 29.0], [28.5, 30.0], [28.6, 31.0], [28.7, 31.0], [28.8, 33.0], [28.9, 33.0], [29.0, 34.0], [29.1, 35.0], [29.2, 36.0], [29.3, 36.0], [29.4, 37.0], [29.5, 37.0], [29.6, 38.0], [29.7, 38.0], [29.8, 39.0], [29.9, 40.0], [30.0, 41.0], [30.1, 42.0], [30.2, 42.0], [30.3, 43.0], [30.4, 45.0], [30.5, 48.0], [30.6, 50.0], [30.7, 51.0], [30.8, 52.0], [30.9, 59.0], [31.0, 60.0], [31.1, 62.0], [31.2, 63.0], [31.3, 64.0], [31.4, 65.0], [31.5, 67.0], [31.6, 70.0], [31.7, 73.0], [31.8, 77.0], [31.9, 79.0], [32.0, 80.0], [32.1, 80.0], [32.2, 84.0], [32.3, 86.0], [32.4, 98.0], [32.5, 99.0], [32.6, 101.0], [32.7, 103.0], [32.8, 113.0], [32.9, 119.0], [33.0, 128.0], [33.1, 147.0], [33.2, 166.0], [33.3, 184.0], [33.4, 191.0], [33.5, 208.0], [33.6, 239.0], [33.7, 250.0], [33.8, 280.0], [33.9, 298.0], [34.0, 304.0], [34.1, 334.0], [34.2, 346.0], [34.3, 374.0], [34.4, 382.0], [34.5, 399.0], [34.6, 410.0], [34.7, 414.0], [34.8, 423.0], [34.9, 429.0], [35.0, 444.0], [35.1, 449.0], [35.2, 468.0], [35.3, 474.0], [35.4, 504.0], [35.5, 515.0], [35.6, 524.0], [35.7, 527.0], [35.8, 529.0], [35.9, 545.0], [36.0, 558.0], [36.1, 581.0], [36.2, 583.0], [36.3, 617.0], [36.4, 629.0], [36.5, 656.0], [36.6, 801.0], [36.7, 938.0], [36.8, 961.0], [36.9, 1109.0], [37.0, 1133.0], [37.1, 1197.0], [37.2, 1218.0], [37.3, 1271.0], [37.4, 1327.0], [37.5, 1413.0], [37.6, 1472.0], [37.7, 1547.0], [37.8, 1685.0], [37.9, 1733.0], [38.0, 1876.0], [38.1, 1907.0], [38.2, 1977.0], [38.3, 2052.0], [38.4, 2132.0], [38.5, 2135.0], [38.6, 2137.0], [38.7, 2141.0], [38.8, 2146.0], [38.9, 2162.0], [39.0, 2206.0], [39.1, 2252.0], [39.2, 2311.0], [39.3, 2396.0], [39.4, 2469.0], [39.5, 2531.0], [39.6, 2646.0], [39.7, 2676.0], [39.8, 2705.0], [39.9, 2847.0], [40.0, 2854.0], [40.1, 2957.0], [40.2, 3033.0], [40.3, 3096.0], [40.4, 3178.0], [40.5, 3225.0], [40.6, 3241.0], [40.7, 3251.0], [40.8, 3257.0], [40.9, 3259.0], [41.0, 3265.0], [41.1, 3270.0], [41.2, 3270.0], [41.3, 3273.0], [41.4, 3279.0], [41.5, 3306.0], [41.6, 3309.0], [41.7, 3337.0], [41.8, 3700.0], [41.9, 3778.0], [42.0, 3808.0], [42.1, 3870.0], [42.2, 3881.0], [42.3, 3898.0], [42.4, 3931.0], [42.5, 3980.0], [42.6, 3987.0], [42.7, 4018.0], [42.8, 4027.0], [42.9, 4046.0], [43.0, 4125.0], [43.1, 4162.0], [43.2, 4202.0], [43.3, 4212.0], [43.4, 4259.0], [43.5, 4266.0], [43.6, 4308.0], [43.7, 4329.0], [43.8, 4484.0], [43.9, 4501.0], [44.0, 4590.0], [44.1, 4594.0], [44.2, 4621.0], [44.3, 4627.0], [44.4, 4629.0], [44.5, 4633.0], [44.6, 4634.0], [44.7, 4653.0], [44.8, 4667.0], [44.9, 4674.0], [45.0, 4680.0], [45.1, 4683.0], [45.2, 4686.0], [45.3, 4699.0], [45.4, 4759.0], [45.5, 4796.0], [45.6, 4830.0], [45.7, 4856.0], [45.8, 4871.0], [45.9, 4880.0], [46.0, 4923.0], [46.1, 4940.0], [46.2, 4948.0], [46.3, 4959.0], [46.4, 4963.0], [46.5, 4970.0], [46.6, 4978.0], [46.7, 4992.0], [46.8, 4999.0], [46.9, 5004.0], [47.0, 5025.0], [47.1, 5027.0], [47.2, 5033.0], [47.3, 5048.0], [47.4, 5052.0], [47.5, 5061.0], [47.6, 5074.0], [47.7, 5084.0], [47.8, 5088.0], [47.9, 5096.0], [48.0, 5098.0], [48.1, 5111.0], [48.2, 5122.0], [48.3, 5132.0], [48.4, 5155.0], [48.5, 5164.0], [48.6, 5175.0], [48.7, 5176.0], [48.8, 5195.0], [48.9, 5214.0], [49.0, 5237.0], [49.1, 5240.0], [49.2, 5252.0], [49.3, 5259.0], [49.4, 5269.0], [49.5, 5277.0], [49.6, 5289.0], [49.7, 5306.0], [49.8, 5325.0], [49.9, 5395.0], [50.0, 5442.0], [50.1, 5465.0], [50.2, 5490.0], [50.3, 5509.0], [50.4, 5532.0], [50.5, 5544.0], [50.6, 5572.0], [50.7, 5616.0], [50.8, 5688.0], [50.9, 5742.0], [51.0, 5822.0], [51.1, 5952.0], [51.2, 5967.0], [51.3, 6012.0], [51.4, 6018.0], [51.5, 6035.0], [51.6, 6057.0], [51.7, 6085.0], [51.8, 6123.0], [51.9, 6151.0], [52.0, 6206.0], [52.1, 6230.0], [52.2, 6265.0], [52.3, 6277.0], [52.4, 6326.0], [52.5, 6336.0], [52.6, 6369.0], [52.7, 6378.0], [52.8, 6401.0], [52.9, 6487.0], [53.0, 6528.0], [53.1, 6551.0], [53.2, 6564.0], [53.3, 6603.0], [53.4, 6608.0], [53.5, 6621.0], [53.6, 6629.0], [53.7, 6663.0], [53.8, 6693.0], [53.9, 6711.0], [54.0, 6718.0], [54.1, 6731.0], [54.2, 6748.0], [54.3, 6811.0], [54.4, 6840.0], [54.5, 6848.0], [54.6, 6925.0], [54.7, 6932.0], [54.8, 6947.0], [54.9, 6963.0], [55.0, 6979.0], [55.1, 6997.0], [55.2, 7023.0], [55.3, 7030.0], [55.4, 7041.0], [55.5, 7055.0], [55.6, 7082.0], [55.7, 7093.0], [55.8, 7134.0], [55.9, 7150.0], [56.0, 7159.0], [56.1, 7195.0], [56.2, 7202.0], [56.3, 7215.0], [56.4, 7229.0], [56.5, 7259.0], [56.6, 7272.0], [56.7, 7277.0], [56.8, 7302.0], [56.9, 7313.0], [57.0, 7334.0], [57.1, 7359.0], [57.2, 7388.0], [57.3, 7396.0], [57.4, 7401.0], [57.5, 7416.0], [57.6, 7447.0], [57.7, 7469.0], [57.8, 7498.0], [57.9, 7501.0], [58.0, 7526.0], [58.1, 7540.0], [58.2, 7549.0], [58.3, 7564.0], [58.4, 7585.0], [58.5, 7645.0], [58.6, 7661.0], [58.7, 7686.0], [58.8, 7742.0], [58.9, 7757.0], [59.0, 7768.0], [59.1, 7778.0], [59.2, 7790.0], [59.3, 7795.0], [59.4, 7808.0], [59.5, 7823.0], [59.6, 7842.0], [59.7, 7854.0], [59.8, 7856.0], [59.9, 7861.0], [60.0, 7891.0], [60.1, 7936.0], [60.2, 7964.0], [60.3, 7975.0], [60.4, 8002.0], [60.5, 8005.0], [60.6, 8012.0], [60.7, 8014.0], [60.8, 8036.0], [60.9, 8042.0], [61.0, 8051.0], [61.1, 8078.0], [61.2, 8091.0], [61.3, 8102.0], [61.4, 8110.0], [61.5, 8128.0], [61.6, 8143.0], [61.7, 8163.0], [61.8, 8196.0], [61.9, 8218.0], [62.0, 8227.0], [62.1, 8230.0], [62.2, 8254.0], [62.3, 8294.0], [62.4, 8297.0], [62.5, 8301.0], [62.6, 8302.0], [62.7, 8319.0], [62.8, 8326.0], [62.9, 8354.0], [63.0, 8375.0], [63.1, 8402.0], [63.2, 8423.0], [63.3, 8496.0], [63.4, 8515.0], [63.5, 8528.0], [63.6, 8541.0], [63.7, 8571.0], [63.8, 8614.0], [63.9, 8631.0], [64.0, 8643.0], [64.1, 8684.0], [64.2, 8717.0], [64.3, 8731.0], [64.4, 8762.0], [64.5, 8771.0], [64.6, 8785.0], [64.7, 8798.0], [64.8, 8815.0], [64.9, 8867.0], [65.0, 8872.0], [65.1, 8891.0], [65.2, 8907.0], [65.3, 8920.0], [65.4, 8939.0], [65.5, 8961.0], [65.6, 8973.0], [65.7, 8985.0], [65.8, 8996.0], [65.9, 9001.0], [66.0, 9006.0], [66.1, 9015.0], [66.2, 9039.0], [66.3, 9046.0], [66.4, 9055.0], [66.5, 9069.0], [66.6, 9097.0], [66.7, 9119.0], [66.8, 9158.0], [66.9, 9174.0], [67.0, 9192.0], [67.1, 9208.0], [67.2, 9244.0], [67.3, 9268.0], [67.4, 9283.0], [67.5, 9287.0], [67.6, 9294.0], [67.7, 9302.0], [67.8, 9305.0], [67.9, 9318.0], [68.0, 9334.0], [68.1, 9343.0], [68.2, 9346.0], [68.3, 9352.0], [68.4, 9355.0], [68.5, 9359.0], [68.6, 9374.0], [68.7, 9385.0], [68.8, 9391.0], [68.9, 9396.0], [69.0, 9408.0], [69.1, 9430.0], [69.2, 9443.0], [69.3, 9471.0], [69.4, 9492.0], [69.5, 9493.0], [69.6, 9500.0], [69.7, 9523.0], [69.8, 9540.0], [69.9, 9566.0], [70.0, 9584.0], [70.1, 9607.0], [70.2, 9608.0], [70.3, 9612.0], [70.4, 9624.0], [70.5, 9637.0], [70.6, 9656.0], [70.7, 9680.0], [70.8, 9704.0], [70.9, 9716.0], [71.0, 9728.0], [71.1, 9744.0], [71.2, 9754.0], [71.3, 9768.0], [71.4, 9780.0], [71.5, 9808.0], [71.6, 9841.0], [71.7, 9854.0], [71.8, 9877.0], [71.9, 9886.0], [72.0, 9907.0], [72.1, 9915.0], [72.2, 9940.0], [72.3, 9960.0], [72.4, 9973.0], [72.5, 9989.0], [72.6, 10003.0], [72.7, 10005.0], [72.8, 10008.0], [72.9, 10022.0], [73.0, 10026.0], [73.1, 10039.0], [73.2, 10051.0], [73.3, 10065.0], [73.4, 10071.0], [73.5, 10100.0], [73.6, 10107.0], [73.7, 10126.0], [73.8, 10143.0], [73.9, 10153.0], [74.0, 10182.0], [74.1, 10184.0], [74.2, 10188.0], [74.3, 10191.0], [74.4, 10194.0], [74.5, 10196.0], [74.6, 10213.0], [74.7, 10220.0], [74.8, 10233.0], [74.9, 10241.0], [75.0, 10244.0], [75.1, 10251.0], [75.2, 10259.0], [75.3, 10268.0], [75.4, 10273.0], [75.5, 10289.0], [75.6, 10317.0], [75.7, 10320.0], [75.8, 10342.0], [75.9, 10350.0], [76.0, 10356.0], [76.1, 10361.0], [76.2, 10365.0], [76.3, 10372.0], [76.4, 10375.0], [76.5, 10391.0], [76.6, 10392.0], [76.7, 10403.0], [76.8, 10406.0], [76.9, 10410.0], [77.0, 10424.0], [77.1, 10441.0], [77.2, 10453.0], [77.3, 10453.0], [77.4, 10466.0], [77.5, 10473.0], [77.6, 10478.0], [77.7, 10494.0], [77.8, 10504.0], [77.9, 10508.0], [78.0, 10520.0], [78.1, 10522.0], [78.2, 10528.0], [78.3, 10534.0], [78.4, 10542.0], [78.5, 10544.0], [78.6, 10553.0], [78.7, 10567.0], [78.8, 10570.0], [78.9, 10579.0], [79.0, 10580.0], [79.1, 10592.0], [79.2, 10598.0], [79.3, 10606.0], [79.4, 10616.0], [79.5, 10621.0], [79.6, 10627.0], [79.7, 10634.0], [79.8, 10644.0], [79.9, 10655.0], [80.0, 10657.0], [80.1, 10660.0], [80.2, 10668.0], [80.3, 10674.0], [80.4, 10675.0], [80.5, 10683.0], [80.6, 10707.0], [80.7, 10715.0], [80.8, 10725.0], [80.9, 10741.0], [81.0, 10750.0], [81.1, 10768.0], [81.2, 10788.0], [81.3, 10796.0], [81.4, 10834.0], [81.5, 10843.0], [81.6, 10845.0], [81.7, 10867.0], [81.8, 10879.0], [81.9, 10917.0], [82.0, 10918.0], [82.1, 10930.0], [82.2, 10937.0], [82.3, 10944.0], [82.4, 10951.0], [82.5, 10957.0], [82.6, 10963.0], [82.7, 10977.0], [82.8, 10983.0], [82.9, 10994.0], [83.0, 11010.0], [83.1, 11011.0], [83.2, 11024.0], [83.3, 11028.0], [83.4, 11031.0], [83.5, 11035.0], [83.6, 11042.0], [83.7, 11051.0], [83.8, 11069.0], [83.9, 11092.0], [84.0, 11125.0], [84.1, 11150.0], [84.2, 11161.0], [84.3, 11172.0], [84.4, 11181.0], [84.5, 11193.0], [84.6, 11198.0], [84.7, 11204.0], [84.8, 11208.0], [84.9, 11238.0], [85.0, 11260.0], [85.1, 11291.0], [85.2, 11322.0], [85.3, 11361.0], [85.4, 11370.0], [85.5, 11401.0], [85.6, 11403.0], [85.7, 11430.0], [85.8, 11443.0], [85.9, 11462.0], [86.0, 11468.0], [86.1, 11475.0], [86.2, 11500.0], [86.3, 11516.0], [86.4, 11560.0], [86.5, 11567.0], [86.6, 11572.0], [86.7, 11577.0], [86.8, 11588.0], [86.9, 11593.0], [87.0, 11613.0], [87.1, 11622.0], [87.2, 11650.0], [87.3, 11653.0], [87.4, 11657.0], [87.5, 11677.0], [87.6, 11711.0], [87.7, 11736.0], [87.8, 11743.0], [87.9, 11767.0], [88.0, 11782.0], [88.1, 11798.0], [88.2, 11820.0], [88.3, 11843.0], [88.4, 11862.0], [88.5, 11893.0], [88.6, 11918.0], [88.7, 11923.0], [88.8, 11955.0], [88.9, 11987.0], [89.0, 12021.0], [89.1, 12026.0], [89.2, 12041.0], [89.3, 12063.0], [89.4, 12090.0], [89.5, 12110.0], [89.6, 12123.0], [89.7, 12137.0], [89.8, 12191.0], [89.9, 12205.0], [90.0, 12222.0], [90.1, 12269.0], [90.2, 12304.0], [90.3, 12354.0], [90.4, 12428.0], [90.5, 12437.0], [90.6, 12464.0], [90.7, 12507.0], [90.8, 12523.0], [90.9, 12644.0], [91.0, 12698.0], [91.1, 12796.0], [91.2, 12808.0], [91.3, 12852.0], [91.4, 12875.0], [91.5, 12912.0], [91.6, 13005.0], [91.7, 13023.0], [91.8, 13085.0], [91.9, 13096.0], [92.0, 13169.0], [92.1, 13273.0], [92.2, 13298.0], [92.3, 13319.0], [92.4, 13386.0], [92.5, 13409.0], [92.6, 13452.0], [92.7, 13489.0], [92.8, 13517.0], [92.9, 13532.0], [93.0, 13556.0], [93.1, 13568.0], [93.2, 13579.0], [93.3, 13628.0], [93.4, 13656.0], [93.5, 13747.0], [93.6, 13777.0], [93.7, 13827.0], [93.8, 13864.0], [93.9, 13881.0], [94.0, 13900.0], [94.1, 13932.0], [94.2, 13956.0], [94.3, 13980.0], [94.4, 14005.0], [94.5, 14030.0], [94.6, 14058.0], [94.7, 14066.0], [94.8, 14103.0], [94.9, 14159.0], [95.0, 14168.0], [95.1, 14194.0], [95.2, 14217.0], [95.3, 14221.0], [95.4, 14251.0], [95.5, 14269.0], [95.6, 14321.0], [95.7, 14340.0], [95.8, 14471.0], [95.9, 14514.0], [96.0, 14557.0], [96.1, 14596.0], [96.2, 14624.0], [96.3, 14670.0], [96.4, 14686.0], [96.5, 14701.0], [96.6, 14756.0], [96.7, 14896.0], [96.8, 14949.0], [96.9, 15037.0], [97.0, 15068.0], [97.1, 15130.0], [97.2, 15279.0], [97.3, 15294.0], [97.4, 15369.0], [97.5, 15521.0], [97.6, 15620.0], [97.7, 15717.0], [97.8, 15798.0], [97.9, 15847.0], [98.0, 16017.0], [98.1, 16142.0], [98.2, 16488.0], [98.3, 16541.0], [98.4, 16800.0], [98.5, 16837.0], [98.6, 16857.0], [98.7, 16876.0], [98.8, 16896.0], [98.9, 16915.0], [99.0, 16920.0], [99.1, 16939.0], [99.2, 16955.0], [99.3, 16963.0], [99.4, 16975.0], [99.5, 16998.0], [99.6, 17007.0], [99.7, 17206.0], [99.8, 17283.0], [99.9, 17296.0], [100.0, 17846.0]], "isOverall": false, "label": "HTTP Request_Validador", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 825.0, "series": [{"data": [[0.0, 825.0], [100.0, 22.0], [200.0, 14.0], [300.0, 14.0], [400.0, 21.0], [500.0, 23.0], [600.0, 7.0], [700.0, 1.0], [800.0, 1.0], [900.0, 5.0], [1000.0, 2.0], [1100.0, 7.0], [1200.0, 6.0], [1300.0, 1.0], [1400.0, 5.0], [1500.0, 2.0], [1600.0, 3.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 6.0], [2000.0, 2.0], [2100.0, 16.0], [2200.0, 4.0], [2300.0, 6.0], [2400.0, 1.0], [2500.0, 3.0], [2600.0, 5.0], [2700.0, 3.0], [2800.0, 5.0], [2900.0, 3.0], [3000.0, 4.0], [3100.0, 3.0], [3200.0, 27.0], [3300.0, 7.0], [3700.0, 5.0], [3800.0, 9.0], [3900.0, 8.0], [4000.0, 8.0], [4200.0, 11.0], [4100.0, 5.0], [4300.0, 4.0], [4600.0, 30.0], [4500.0, 7.0], [4400.0, 3.0], [4800.0, 11.0], [4700.0, 5.0], [4900.0, 22.0], [5000.0, 30.0], [5100.0, 21.0], [5200.0, 21.0], [5300.0, 6.0], [5500.0, 10.0], [5600.0, 5.0], [5400.0, 9.0], [5700.0, 3.0], [5800.0, 2.0], [5900.0, 6.0], [6000.0, 12.0], [6100.0, 6.0], [6300.0, 10.0], [6200.0, 10.0], [6400.0, 4.0], [6500.0, 9.0], [6600.0, 14.0], [6800.0, 8.0], [6700.0, 10.0], [6900.0, 14.0], [7000.0, 16.0], [7100.0, 11.0], [7300.0, 16.0], [7200.0, 15.0], [7400.0, 12.0], [7600.0, 8.0], [7500.0, 14.0], [7900.0, 9.0], [7800.0, 18.0], [7700.0, 15.0], [8000.0, 21.0], [8100.0, 15.0], [8400.0, 7.0], [8500.0, 11.0], [8600.0, 9.0], [8700.0, 15.0], [8200.0, 17.0], [8300.0, 15.0], [8900.0, 18.0], [9000.0, 20.0], [9100.0, 10.0], [9200.0, 16.0], [8800.0, 10.0], [9300.0, 33.0], [9400.0, 16.0], [9700.0, 19.0], [9600.0, 16.0], [9500.0, 13.0], [9800.0, 13.0], [10100.0, 27.0], [10200.0, 24.0], [10000.0, 24.0], [9900.0, 14.0], [10400.0, 26.0], [10300.0, 30.0], [10500.0, 39.0], [10700.0, 20.0], [10600.0, 32.0], [10900.0, 29.0], [10800.0, 14.0], [11000.0, 23.0], [11200.0, 13.0], [11100.0, 18.0], [11300.0, 9.0], [11600.0, 17.0], [11500.0, 18.0], [11400.0, 18.0], [11700.0, 14.0], [11800.0, 10.0], [11900.0, 10.0], [12000.0, 14.0], [12100.0, 10.0], [12200.0, 8.0], [12400.0, 8.0], [12700.0, 3.0], [12300.0, 5.0], [12500.0, 5.0], [12600.0, 3.0], [12800.0, 9.0], [13000.0, 10.0], [13200.0, 4.0], [13100.0, 3.0], [13300.0, 5.0], [12900.0, 2.0], [13500.0, 13.0], [13400.0, 7.0], [13600.0, 6.0], [13800.0, 8.0], [13700.0, 5.0], [13900.0, 11.0], [14000.0, 9.0], [14200.0, 11.0], [14300.0, 4.0], [14100.0, 9.0], [14500.0, 6.0], [14600.0, 9.0], [14400.0, 5.0], [14800.0, 3.0], [14700.0, 3.0], [15000.0, 6.0], [15300.0, 3.0], [15200.0, 4.0], [14900.0, 2.0], [15100.0, 3.0], [15400.0, 1.0], [15600.0, 3.0], [15500.0, 1.0], [15800.0, 3.0], [15700.0, 5.0], [16000.0, 2.0], [15900.0, 1.0], [16200.0, 1.0], [16100.0, 1.0], [16500.0, 2.0], [16700.0, 1.0], [16600.0, 1.0], [16800.0, 11.0], [16900.0, 18.0], [17000.0, 4.0], [16400.0, 2.0], [17200.0, 6.0], [17400.0, 1.0], [17800.0, 1.0]], "isOverall": false, "label": "HTTP Request_Validador", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 1459.0, "series": [{"data": [[0.0, 25.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 36.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 1459.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 1015.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 158.5921985815603, "minX": 1.67747154E12, "maxY": 395.9691119691118, "series": [{"data": [[1.6774716E12, 233.75628140703498], [1.67747166E12, 395.9691119691118], [1.67747154E12, 158.5921985815603]], "isOverall": false, "label": "Validador", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67747166E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.0, "minX": 7.0, "maxY": 17846.0, "series": [{"data": [[7.0, 10407.0], [9.0, 392.3333333333333], [10.0, 393.8], [11.0, 462.5555555555555], [12.0, 483.83333333333337], [13.0, 1043.625], [14.0, 527.0], [15.0, 616.0], [16.0, 642.5], [17.0, 629.0], [37.0, 2252.0], [45.0, 2128.0], [44.0, 2957.0], [46.0, 2705.0], [50.0, 8080.0], [52.0, 2328.0], [53.0, 6351.5], [61.0, 1416.0], [62.0, 2326.5], [70.0, 1105.6], [71.0, 1409.5], [69.0, 1165.0], [72.0, 1023.0], [73.0, 5150.0], [75.0, 2134.0], [74.0, 2137.5], [79.0, 2136.0], [78.0, 4710.333333333334], [77.0, 2140.5], [76.0, 4909.333333333334], [81.0, 2131.0], [80.0, 2132.0], [88.0, 1938.0], [91.0, 2217.0], [90.0, 2206.0], [89.0, 2112.3333333333335], [94.0, 628.0], [95.0, 3225.0], [98.0, 2397.0], [97.0, 2396.0], [96.0, 3259.0], [111.0, 3264.5], [110.0, 3062.3333333333335], [109.0, 3082.5], [108.0, 3096.0], [112.0, 3148.375], [114.0, 3172.6], [113.0, 3100.0], [115.0, 3286.6666666666665], [116.0, 3273.0], [119.0, 4624.0], [121.0, 2780.5], [123.0, 4621.0], [122.0, 4593.0], [120.0, 4594.0], [126.0, 3497.25], [125.0, 6026.0], [124.0, 4621.666666666667], [127.0, 3314.5], [130.0, 3930.3333333333335], [129.0, 5275.25], [128.0, 4179.333333333333], [131.0, 3885.0], [135.0, 3745.6666666666665], [134.0, 4017.571428571429], [133.0, 4094.0], [132.0, 3891.8124999999995], [141.0, 3921.8], [140.0, 3859.0], [139.0, 3628.25], [138.0, 3745.666666666667], [137.0, 3997.2], [136.0, 3838.3333333333335], [143.0, 2227.0], [142.0, 3786.0], [146.0, 3891.6666666666665], [148.0, 4107.0], [147.0, 4940.555555555556], [151.0, 6323.4], [150.0, 5332.0], [149.0, 5275.0], [145.0, 1977.0], [144.0, 3509.0], [152.0, 5949.2], [154.0, 7052.0], [157.0, 4968.0], [153.0, 4665.5], [162.0, 5030.0], [161.0, 5013.0], [164.0, 5789.0], [163.0, 5888.333333333333], [165.0, 5065.375], [166.0, 5213.6], [167.0, 5971.428571428571], [168.0, 5124.666666666666], [169.0, 7356.545454545454], [172.0, 5198.333333333333], [171.0, 5111.285714285714], [170.0, 5051.0], [175.0, 5186.25], [174.0, 5064.6], [173.0, 5020.8], [176.0, 5158.0], [180.0, 5354.25], [179.0, 5441.0], [177.0, 5267.0], [182.0, 5729.0], [181.0, 5638.0], [183.0, 5742.0], [187.0, 6005.0], [189.0, 6024.727272727273], [190.0, 6041.0], [188.0, 6079.0], [198.0, 6477.25], [197.0, 6275.428571428572], [196.0, 6121.0], [199.0, 4961.833333333333], [200.0, 10303.0], [204.0, 8362.5], [205.0, 5959.400000000001], [207.0, 8543.04761904762], [206.0, 7863.75], [203.0, 6158.666666666667], [202.0, 6744.571428571428], [201.0, 10071.0], [210.0, 6134.571428571428], [212.0, 4417.0666666666675], [213.0, 5597.388888888889], [214.0, 6060.90909090909], [215.0, 5916.214285714286], [211.0, 7068.071428571428], [209.0, 6737.333333333332], [208.0, 8431.615384615387], [223.0, 7271.418604651161], [222.0, 4940.500000000001], [221.0, 6167.483870967742], [220.0, 4650.240000000002], [219.0, 6439.315789473683], [218.0, 5161.315789473684], [217.0, 5844.05], [216.0, 5433.076923076923], [225.0, 6006.085714285713], [224.0, 4853.777777777777], [231.0, 7129.608695652173], [228.0, 5751.710526315789], [230.0, 6149.392857142858], [229.0, 6785.4444444444425], [227.0, 5069.580645161291], [226.0, 6126.966666666665], [232.0, 6800.038461538462], [233.0, 4379.291666666668], [239.0, 4592.896551724138], [238.0, 6414.62962962963], [237.0, 6552.454545454544], [236.0, 6339.516129032259], [235.0, 4936.423076923075], [234.0, 4904.103448275861], [246.0, 5684.1290322580635], [245.0, 4556.904761904763], [247.0, 6197.600000000001], [244.0, 5524.314285714286], [243.0, 4245.291666666667], [242.0, 5218.574468085106], [241.0, 5135.749999999999], [240.0, 4447.695652173913], [250.0, 6894.296296296296], [249.0, 5954.017241379311], [251.0, 8354.38888888889], [254.0, 8142.680000000002], [255.0, 8490.235294117649], [253.0, 7506.576923076925], [252.0, 7084.285714285715], [248.0, 6288.736842105263], [258.0, 5505.375], [262.0, 2441.25], [257.0, 5895.687500000001], [261.0, 5617.833333333333], [260.0, 4331.0], [259.0, 3476.8500000000013], [268.0, 7215.250000000001], [264.0, 2070.333333333333], [269.0, 3441.774999999999], [270.0, 7151.5], [271.0, 7162.0], [256.0, 5813.25], [263.0, 9.0], [266.0, 2472.2], [267.0, 4962.333333333334], [265.0, 10235.2], [273.0, 2902.6], [277.0, 8324.9375], [275.0, 3351.0], [274.0, 170.0], [284.0, 135.0], [276.0, 7797.5], [279.0, 7809.5], [272.0, 56.5], [278.0, 6085.0], [283.0, 1766.0], [282.0, 293.0], [285.0, 10609.75], [286.0, 4712.555555555556], [280.0, 5153.0], [287.0, 3156.6], [281.0, 196.5], [291.0, 596.5], [302.0, 10699.857142857143], [295.0, 406.49999999999994], [293.0, 33.5], [292.0, 79.0], [294.0, 61.0], [290.0, 526.0], [288.0, 167.75], [303.0, 70.0], [297.0, 3464.0], [296.0, 80.0], [299.0, 80.0], [298.0, 79.0], [301.0, 80.0], [300.0, 81.0], [319.0, 12.0], [313.0, 11314.125], [307.0, 1934.0], [306.0, 66.0], [305.0, 70.0], [304.0, 67.0], [317.0, 312.5], [316.0, 13.0], [314.0, 405.5], [315.0, 13.0], [312.0, 1575.3333333333333], [311.0, 20.0], [310.0, 45.666666666666664], [309.0, 46.25], [308.0, 93.25], [334.0, 5362.666666666666], [324.0, 7649.5], [326.0, 63.0], [325.0, 7.0], [335.0, 77.0], [332.0, 16.0], [323.0, 6.0], [322.0, 5.0], [321.0, 67.0], [320.0, 10.0], [331.0, 6.0], [330.0, 10.0], [329.0, 48.0], [328.0, 86.0], [327.0, 81.0], [350.0, 8481.0], [339.0, 16384.5], [338.0, 10855.666666666668], [337.0, 12.0], [336.0, 10.0], [343.0, 38.0], [342.0, 73.0], [341.0, 36.0], [340.0, 28.0], [351.0, 20.0], [348.0, 17.5], [347.0, 33.0], [346.0, 34.0], [345.0, 25.5], [344.0, 52.0], [355.0, 8356.5], [367.0, 5951.833333333333], [364.0, 4462.2], [363.0, 7667.666666666666], [353.0, 11218.5], [354.0, 14.0], [352.0, 5798.5], [359.0, 51.0], [358.0, 43.0], [357.0, 74.0], [356.0, 51.0], [366.0, 22.0], [365.0, 7.0], [362.0, 50.0], [361.0, 42.0], [382.0, 26.333333333333332], [383.0, 74.66666666666667], [376.0, 9.0], [377.0, 5310.75], [378.0, 16.0], [381.0, 7.0], [370.0, 20.0], [375.0, 45.0], [374.0, 4603.4], [373.0, 3254.4999999999995], [372.0, 14.5], [369.0, 5624.875], [368.0, 3314.25], [397.0, 4757.75], [396.0, 69.0], [395.0, 5232.0], [390.0, 2672.0], [389.0, 4699.666666666667], [387.0, 16.0], [386.0, 3592.777777777778], [384.0, 7342.583333333334], [414.0, 9032.666666666666], [412.0, 8996.0], [409.0, 8638.25], [407.0, 8322.666666666666], [403.0, 109.0], [428.0, 9607.0], [419.0, 904.0], [418.0, 9479.0], [416.0, 9130.0], [423.0, 9331.0], [430.0, 15709.0], [441.0, 10943.8], [433.0, 12507.0], [449.0, 11125.0], [456.0, 12497.0], [455.0, 12428.0], [499.0, 16711.0], [511.0, 11339.0], [502.0, 9121.0], [504.0, 7259.0], [509.0, 9295.0], [514.0, 14507.088235294119], [519.0, 12548.0], [520.0, 16015.875], [515.0, 14514.0], [516.0, 7159.0], [517.0, 17846.0], [543.0, 15717.0], [544.0, 11926.0], [552.0, 9624.0], [582.0, 8921.0], [597.0, 7022.0], [674.0, 6725.0], [731.0, 9359.0], [706.0, 9061.0], [730.0, 13943.0], [734.0, 14907.0], [756.0, 9285.0], [770.0, 9481.0], [783.0, 8762.0], [800.0, 2983.0], [842.0, 5616.0], [834.0, 5614.0], [878.0, 9.0], [965.0, 8508.0], [973.0, 15619.0], [1002.0, 15620.0], [1114.0, 8987.0], [1088.0, 6609.0], [1165.0, 6834.0], [1188.0, 10.0], [1190.0, 7019.0], [1252.0, 15725.0], [1264.0, 15757.0], [1221.0, 6.0], [1332.0, 17487.0], [1323.0, 15868.0], [1335.0, 7388.0], [1322.0, 7722.5], [1337.0, 3.0], [1283.0, 2639.0], [1380.0, 8.0], [1391.0, 16017.0], [1401.0, 7501.0], [1392.0, 382.0], [1398.0, 8.0], [1399.0, 7854.0], [1372.0, 5.0], [1358.0, 13.0], [1421.0, 7718.666666666667], [1416.0, 2557.0], [1429.0, 7279.5], [1445.0, 16142.0], [1437.0, 6.0], [1435.0, 8103.0], [1451.0, 7401.0], [1427.0, 8006.0], [1490.0, 8375.0], [1494.0, 8297.0], [1534.0, 8042.0], [1590.0, 8312.0], [1594.0, 8430.0], [1635.0, 8028.0], [1606.0, 7635.333333333333]], "isOverall": false, "label": "HTTP Request_Validador", "isController": false}, {"data": [[266.7530571992108, 5701.482445759365]], "isOverall": false, "label": "HTTP Request_Validador-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1635.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 441.0, "minX": 1.67747154E12, "maxY": 25340.5, "series": [{"data": [[1.6774716E12, 21533.15], [1.67747166E12, 25340.5], [1.67747154E12, 1663.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6774716E12, 1568.7], [1.67747166E12, 441.0], [1.67747154E12, 1184.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67747166E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4943.996138996136, "minX": 1.67747154E12, "maxY": 6352.503350083753, "series": [{"data": [[1.6774716E12, 6352.503350083753], [1.67747166E12, 4943.996138996136], [1.67747154E12, 5366.8156028368785]], "isOverall": false, "label": "HTTP Request_Validador", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67747166E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3623.4144144144175, "minX": 1.67747154E12, "maxY": 6348.484924623121, "series": [{"data": [[1.6774716E12, 6348.484924623121], [1.67747166E12, 3623.4144144144175], [1.67747154E12, 5365.294326241131]], "isOverall": false, "label": "HTTP Request_Validador", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67747166E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.2074468085106407, "minX": 1.67747154E12, "maxY": 81.69240669240669, "series": [{"data": [[1.6774716E12, 5.262144053601344], [1.67747166E12, 81.69240669240669], [1.67747154E12, 3.2074468085106407]], "isOverall": false, "label": "HTTP Request_Validador", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67747166E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 333.0, "minX": 1.67747154E12, "maxY": 17487.0, "series": [{"data": [[1.6774716E12, 15847.0], [1.67747166E12, 17487.0], [1.67747154E12, 11035.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6774716E12, 13307.1], [1.67747166E12, 16949.8], [1.67747154E12, 9702.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6774716E12, 15368.06], [1.67747166E12, 17295.12], [1.67747154E12, 10965.2]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6774716E12, 14000.1], [1.67747166E12, 17006.45], [1.67747154E12, 10641.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6774716E12, 5822.0], [1.67747166E12, 7842.0], [1.67747154E12, 333.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6774716E12, 10357.5], [1.67747166E12, 13826.5], [1.67747154E12, 5014.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67747166E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 1.0, "maxY": 17846.0, "series": [{"data": [[33.0, 6261.0], [2.0, 5887.0], [34.0, 14251.0], [35.0, 9543.0], [39.0, 16895.0], [47.0, 2987.0], [46.0, 11508.5], [3.0, 11031.0], [51.0, 504.0], [52.0, 13495.5], [56.0, 6673.5], [59.0, 3275.0], [63.0, 9382.0], [72.0, 9552.5], [79.0, 8375.0], [93.0, 5183.0], [98.0, 6011.0], [100.0, 11461.5], [10.0, 15475.0], [12.0, 17273.0], [205.0, 10503.5], [14.0, 10318.0], [16.0, 7304.0], [20.0, 13975.0], [21.0, 12354.0], [24.0, 1640.0], [27.0, 14340.0], [28.0, 8561.0], [31.0, 8423.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 5421.5], [35.0, 9536.0], [34.0, 14907.0], [39.0, 16142.0], [47.0, 11190.0], [12.0, 17846.0], [205.0, 10951.0], [13.0, 1218.0], [14.0, 10363.0], [1.0, 2141.0], [4.0, 3827.0], [18.0, 5466.5], [20.0, 7539.5], [21.0, 12511.0], [447.0, 7.0], [435.0, 16.0], [28.0, 8334.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 447.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 16684.0, "series": [{"data": [[33.0, 6261.0], [2.0, 5884.0], [34.0, 14215.0], [35.0, 9540.5], [39.0, 16675.5], [47.0, 2985.0], [46.0, 11505.5], [3.0, 11030.0], [51.0, 504.0], [52.0, 13493.5], [56.0, 6671.0], [59.0, 3269.0], [63.0, 9381.0], [72.0, 9551.0], [79.0, 8375.0], [93.0, 5183.0], [98.0, 6010.5], [100.0, 11457.5], [10.0, 15475.0], [12.0, 16684.0], [205.0, 10503.5], [14.0, 10316.0], [16.0, 7304.0], [20.0, 13973.5], [21.0, 12219.0], [24.0, 1639.0], [27.0, 14336.0], [28.0, 8556.5], [31.0, 8423.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 0.0], [35.0, 0.0], [34.0, 0.0], [39.0, 0.0], [47.0, 0.0], [12.0, 0.0], [205.0, 10951.0], [13.0, 0.0], [14.0, 0.0], [1.0, 0.0], [4.0, 0.0], [18.0, 0.0], [20.0, 0.0], [21.0, 0.0], [447.0, 0.0], [435.0, 0.0], [28.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 447.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9.4, "minX": 1.67747154E12, "maxY": 19.9, "series": [{"data": [[1.6774716E12, 19.9], [1.67747166E12, 12.95], [1.67747154E12, 9.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67747166E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.67747154E12, "maxY": 12.433333333333334, "series": [{"data": [[1.6774716E12, 12.433333333333334], [1.67747166E12, 3.5], [1.67747154E12, 9.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6774716E12, 7.45], [1.67747166E12, 7.483333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.6774716E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.67747166E12, 1.9666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67747166E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.5, "minX": 1.67747154E12, "maxY": 12.433333333333334, "series": [{"data": [[1.6774716E12, 12.433333333333334], [1.67747166E12, 3.5], [1.67747154E12, 9.4]], "isOverall": false, "label": "HTTP Request_Validador-success", "isController": false}, {"data": [[1.6774716E12, 7.466666666666667], [1.67747166E12, 9.45]], "isOverall": false, "label": "HTTP Request_Validador-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67747166E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.5, "minX": 1.67747154E12, "maxY": 12.433333333333334, "series": [{"data": [[1.6774716E12, 12.433333333333334], [1.67747166E12, 3.5], [1.67747154E12, 9.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6774716E12, 7.466666666666667], [1.67747166E12, 9.45]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67747166E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

