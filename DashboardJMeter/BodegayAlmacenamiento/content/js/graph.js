/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 15668.0, "series": [{"data": [[0.0, 2.0], [0.1, 2.0], [0.2, 3.0], [0.3, 3.0], [0.4, 3.0], [0.5, 3.0], [0.6, 3.0], [0.7, 3.0], [0.8, 3.0], [0.9, 3.0], [1.0, 4.0], [1.1, 4.0], [1.2, 4.0], [1.3, 4.0], [1.4, 4.0], [1.5, 4.0], [1.6, 4.0], [1.7, 4.0], [1.8, 4.0], [1.9, 4.0], [2.0, 4.0], [2.1, 4.0], [2.2, 4.0], [2.3, 4.0], [2.4, 4.0], [2.5, 4.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 5.0], [3.8, 5.0], [3.9, 5.0], [4.0, 5.0], [4.1, 5.0], [4.2, 5.0], [4.3, 5.0], [4.4, 5.0], [4.5, 5.0], [4.6, 5.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 8.0], [9.0, 8.0], [9.1, 8.0], [9.2, 8.0], [9.3, 8.0], [9.4, 8.0], [9.5, 8.0], [9.6, 8.0], [9.7, 8.0], [9.8, 8.0], [9.9, 8.0], [10.0, 8.0], [10.1, 9.0], [10.2, 9.0], [10.3, 9.0], [10.4, 9.0], [10.5, 9.0], [10.6, 9.0], [10.7, 9.0], [10.8, 9.0], [10.9, 9.0], [11.0, 9.0], [11.1, 9.0], [11.2, 9.0], [11.3, 9.0], [11.4, 9.0], [11.5, 10.0], [11.6, 10.0], [11.7, 10.0], [11.8, 10.0], [11.9, 10.0], [12.0, 10.0], [12.1, 10.0], [12.2, 10.0], [12.3, 10.0], [12.4, 10.0], [12.5, 10.0], [12.6, 11.0], [12.7, 11.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 12.0], [13.7, 12.0], [13.8, 12.0], [13.9, 12.0], [14.0, 12.0], [14.1, 12.0], [14.2, 12.0], [14.3, 13.0], [14.4, 13.0], [14.5, 13.0], [14.6, 13.0], [14.7, 14.0], [14.8, 14.0], [14.9, 14.0], [15.0, 14.0], [15.1, 14.0], [15.2, 14.0], [15.3, 15.0], [15.4, 15.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 16.0], [16.1, 16.0], [16.2, 17.0], [16.3, 17.0], [16.4, 17.0], [16.5, 17.0], [16.6, 18.0], [16.7, 18.0], [16.8, 18.0], [16.9, 18.0], [17.0, 19.0], [17.1, 19.0], [17.2, 19.0], [17.3, 20.0], [17.4, 20.0], [17.5, 20.0], [17.6, 21.0], [17.7, 21.0], [17.8, 22.0], [17.9, 23.0], [18.0, 23.0], [18.1, 24.0], [18.2, 25.0], [18.3, 25.0], [18.4, 25.0], [18.5, 25.0], [18.6, 25.0], [18.7, 25.0], [18.8, 26.0], [18.9, 26.0], [19.0, 26.0], [19.1, 28.0], [19.2, 28.0], [19.3, 29.0], [19.4, 29.0], [19.5, 29.0], [19.6, 29.0], [19.7, 30.0], [19.8, 30.0], [19.9, 31.0], [20.0, 31.0], [20.1, 31.0], [20.2, 32.0], [20.3, 33.0], [20.4, 34.0], [20.5, 35.0], [20.6, 39.0], [20.7, 39.0], [20.8, 44.0], [20.9, 45.0], [21.0, 46.0], [21.1, 47.0], [21.2, 49.0], [21.3, 51.0], [21.4, 53.0], [21.5, 54.0], [21.6, 55.0], [21.7, 57.0], [21.8, 59.0], [21.9, 65.0], [22.0, 67.0], [22.1, 69.0], [22.2, 70.0], [22.3, 71.0], [22.4, 77.0], [22.5, 78.0], [22.6, 80.0], [22.7, 84.0], [22.8, 87.0], [22.9, 89.0], [23.0, 90.0], [23.1, 94.0], [23.2, 99.0], [23.3, 101.0], [23.4, 104.0], [23.5, 112.0], [23.6, 115.0], [23.7, 116.0], [23.8, 117.0], [23.9, 121.0], [24.0, 123.0], [24.1, 125.0], [24.2, 127.0], [24.3, 127.0], [24.4, 131.0], [24.5, 134.0], [24.6, 138.0], [24.7, 143.0], [24.8, 147.0], [24.9, 148.0], [25.0, 151.0], [25.1, 160.0], [25.2, 165.0], [25.3, 168.0], [25.4, 185.0], [25.5, 188.0], [25.6, 195.0], [25.7, 202.0], [25.8, 219.0], [25.9, 231.0], [26.0, 238.0], [26.1, 240.0], [26.2, 265.0], [26.3, 293.0], [26.4, 300.0], [26.5, 313.0], [26.6, 321.0], [26.7, 330.0], [26.8, 338.0], [26.9, 381.0], [27.0, 409.0], [27.1, 460.0], [27.2, 577.0], [27.3, 677.0], [27.4, 760.0], [27.5, 864.0], [27.6, 894.0], [27.7, 954.0], [27.8, 1113.0], [27.9, 1190.0], [28.0, 1334.0], [28.1, 1498.0], [28.2, 1531.0], [28.3, 1605.0], [28.4, 1801.0], [28.5, 1825.0], [28.6, 1977.0], [28.7, 2274.0], [28.8, 2291.0], [28.9, 2297.0], [29.0, 2306.0], [29.1, 2320.0], [29.2, 2328.0], [29.3, 2364.0], [29.4, 2458.0], [29.5, 2545.0], [29.6, 2567.0], [29.7, 2685.0], [29.8, 2692.0], [29.9, 2739.0], [30.0, 2760.0], [30.1, 2824.0], [30.2, 2879.0], [30.3, 2947.0], [30.4, 2961.0], [30.5, 3002.0], [30.6, 3058.0], [30.7, 3105.0], [30.8, 3131.0], [30.9, 3150.0], [31.0, 3166.0], [31.1, 3174.0], [31.2, 3190.0], [31.3, 3197.0], [31.4, 3202.0], [31.5, 3204.0], [31.6, 3207.0], [31.7, 3209.0], [31.8, 3229.0], [31.9, 3242.0], [32.0, 3248.0], [32.1, 3250.0], [32.2, 3251.0], [32.3, 3253.0], [32.4, 3254.0], [32.5, 3255.0], [32.6, 3257.0], [32.7, 3260.0], [32.8, 3262.0], [32.9, 3264.0], [33.0, 3268.0], [33.1, 3271.0], [33.2, 3272.0], [33.3, 3273.0], [33.4, 3274.0], [33.5, 3275.0], [33.6, 3278.0], [33.7, 3283.0], [33.8, 3284.0], [33.9, 3286.0], [34.0, 3292.0], [34.1, 3297.0], [34.2, 3306.0], [34.3, 3307.0], [34.4, 3309.0], [34.5, 3315.0], [34.6, 3328.0], [34.7, 3331.0], [34.8, 3341.0], [34.9, 3347.0], [35.0, 3355.0], [35.1, 3365.0], [35.2, 3367.0], [35.3, 3368.0], [35.4, 3370.0], [35.5, 3376.0], [35.6, 3377.0], [35.7, 3381.0], [35.8, 3387.0], [35.9, 3394.0], [36.0, 3400.0], [36.1, 3405.0], [36.2, 3407.0], [36.3, 3412.0], [36.4, 3413.0], [36.5, 3422.0], [36.6, 3436.0], [36.7, 3450.0], [36.8, 3453.0], [36.9, 3458.0], [37.0, 3461.0], [37.1, 3465.0], [37.2, 3474.0], [37.3, 3482.0], [37.4, 3503.0], [37.5, 3510.0], [37.6, 3527.0], [37.7, 3535.0], [37.8, 3556.0], [37.9, 3570.0], [38.0, 3592.0], [38.1, 3603.0], [38.2, 3606.0], [38.3, 3615.0], [38.4, 3632.0], [38.5, 3637.0], [38.6, 3650.0], [38.7, 3671.0], [38.8, 3675.0], [38.9, 3685.0], [39.0, 3689.0], [39.1, 3694.0], [39.2, 3699.0], [39.3, 3711.0], [39.4, 3716.0], [39.5, 3726.0], [39.6, 3734.0], [39.7, 3736.0], [39.8, 3740.0], [39.9, 3763.0], [40.0, 3768.0], [40.1, 3777.0], [40.2, 3785.0], [40.3, 3788.0], [40.4, 3796.0], [40.5, 3807.0], [40.6, 3808.0], [40.7, 3823.0], [40.8, 3835.0], [40.9, 3840.0], [41.0, 3842.0], [41.1, 3848.0], [41.2, 3852.0], [41.3, 3858.0], [41.4, 3870.0], [41.5, 3874.0], [41.6, 3899.0], [41.7, 3912.0], [41.8, 3920.0], [41.9, 3946.0], [42.0, 3955.0], [42.1, 3972.0], [42.2, 4003.0], [42.3, 4015.0], [42.4, 4035.0], [42.5, 4055.0], [42.6, 4103.0], [42.7, 4108.0], [42.8, 4141.0], [42.9, 4159.0], [43.0, 4176.0], [43.1, 4224.0], [43.2, 4266.0], [43.3, 4286.0], [43.4, 4329.0], [43.5, 4332.0], [43.6, 4350.0], [43.7, 4358.0], [43.8, 4361.0], [43.9, 4390.0], [44.0, 4406.0], [44.1, 4418.0], [44.2, 4448.0], [44.3, 4474.0], [44.4, 4477.0], [44.5, 4487.0], [44.6, 4509.0], [44.7, 4519.0], [44.8, 4542.0], [44.9, 4574.0], [45.0, 4582.0], [45.1, 4590.0], [45.2, 4593.0], [45.3, 4614.0], [45.4, 4631.0], [45.5, 4635.0], [45.6, 4640.0], [45.7, 4645.0], [45.8, 4652.0], [45.9, 4654.0], [46.0, 4666.0], [46.1, 4668.0], [46.2, 4670.0], [46.3, 4680.0], [46.4, 4687.0], [46.5, 4690.0], [46.6, 4693.0], [46.7, 4698.0], [46.8, 4700.0], [46.9, 4701.0], [47.0, 4705.0], [47.1, 4711.0], [47.2, 4730.0], [47.3, 4737.0], [47.4, 4748.0], [47.5, 4782.0], [47.6, 4811.0], [47.7, 4827.0], [47.8, 4845.0], [47.9, 4863.0], [48.0, 4879.0], [48.1, 4897.0], [48.2, 4907.0], [48.3, 4923.0], [48.4, 4956.0], [48.5, 4975.0], [48.6, 4979.0], [48.7, 5009.0], [48.8, 5022.0], [48.9, 5051.0], [49.0, 5070.0], [49.1, 5071.0], [49.2, 5079.0], [49.3, 5133.0], [49.4, 5154.0], [49.5, 5166.0], [49.6, 5186.0], [49.7, 5192.0], [49.8, 5208.0], [49.9, 5245.0], [50.0, 5273.0], [50.1, 5310.0], [50.2, 5334.0], [50.3, 5344.0], [50.4, 5381.0], [50.5, 5481.0], [50.6, 5503.0], [50.7, 5517.0], [50.8, 5542.0], [50.9, 5557.0], [51.0, 5569.0], [51.1, 5577.0], [51.2, 5581.0], [51.3, 5590.0], [51.4, 5605.0], [51.5, 5620.0], [51.6, 5628.0], [51.7, 5632.0], [51.8, 5642.0], [51.9, 5659.0], [52.0, 5668.0], [52.1, 5681.0], [52.2, 5691.0], [52.3, 5696.0], [52.4, 5697.0], [52.5, 5707.0], [52.6, 5713.0], [52.7, 5717.0], [52.8, 5725.0], [52.9, 5735.0], [53.0, 5739.0], [53.1, 5745.0], [53.2, 5747.0], [53.3, 5752.0], [53.4, 5753.0], [53.5, 5760.0], [53.6, 5762.0], [53.7, 5766.0], [53.8, 5770.0], [53.9, 5771.0], [54.0, 5774.0], [54.1, 5782.0], [54.2, 5786.0], [54.3, 5789.0], [54.4, 5794.0], [54.5, 5796.0], [54.6, 5803.0], [54.7, 5810.0], [54.8, 5812.0], [54.9, 5816.0], [55.0, 5818.0], [55.1, 5821.0], [55.2, 5831.0], [55.3, 5839.0], [55.4, 5844.0], [55.5, 5847.0], [55.6, 5850.0], [55.7, 5854.0], [55.8, 5864.0], [55.9, 5872.0], [56.0, 5877.0], [56.1, 5883.0], [56.2, 5889.0], [56.3, 5892.0], [56.4, 5899.0], [56.5, 5907.0], [56.6, 5920.0], [56.7, 5927.0], [56.8, 5932.0], [56.9, 5936.0], [57.0, 5945.0], [57.1, 5948.0], [57.2, 5953.0], [57.3, 5959.0], [57.4, 5964.0], [57.5, 5981.0], [57.6, 5989.0], [57.7, 5996.0], [57.8, 5999.0], [57.9, 6015.0], [58.0, 6017.0], [58.1, 6019.0], [58.2, 6022.0], [58.3, 6024.0], [58.4, 6028.0], [58.5, 6032.0], [58.6, 6033.0], [58.7, 6035.0], [58.8, 6042.0], [58.9, 6045.0], [59.0, 6050.0], [59.1, 6054.0], [59.2, 6056.0], [59.3, 6057.0], [59.4, 6062.0], [59.5, 6064.0], [59.6, 6068.0], [59.7, 6082.0], [59.8, 6085.0], [59.9, 6087.0], [60.0, 6093.0], [60.1, 6096.0], [60.2, 6098.0], [60.3, 6112.0], [60.4, 6117.0], [60.5, 6130.0], [60.6, 6140.0], [60.7, 6142.0], [60.8, 6173.0], [60.9, 6211.0], [61.0, 6218.0], [61.1, 6226.0], [61.2, 6244.0], [61.3, 6245.0], [61.4, 6270.0], [61.5, 6290.0], [61.6, 6294.0], [61.7, 6303.0], [61.8, 6313.0], [61.9, 6329.0], [62.0, 6344.0], [62.1, 6353.0], [62.2, 6395.0], [62.3, 6499.0], [62.4, 6625.0], [62.5, 6653.0], [62.6, 6711.0], [62.7, 6737.0], [62.8, 6773.0], [62.9, 6799.0], [63.0, 6814.0], [63.1, 6816.0], [63.2, 6825.0], [63.3, 6838.0], [63.4, 6858.0], [63.5, 6870.0], [63.6, 6885.0], [63.7, 6900.0], [63.8, 6907.0], [63.9, 6922.0], [64.0, 6926.0], [64.1, 6932.0], [64.2, 6954.0], [64.3, 6961.0], [64.4, 6976.0], [64.5, 6980.0], [64.6, 6992.0], [64.7, 6999.0], [64.8, 7008.0], [64.9, 7017.0], [65.0, 7030.0], [65.1, 7033.0], [65.2, 7040.0], [65.3, 7045.0], [65.4, 7050.0], [65.5, 7058.0], [65.6, 7068.0], [65.7, 7070.0], [65.8, 7075.0], [65.9, 7082.0], [66.0, 7086.0], [66.1, 7095.0], [66.2, 7097.0], [66.3, 7102.0], [66.4, 7112.0], [66.5, 7123.0], [66.6, 7133.0], [66.7, 7145.0], [66.8, 7151.0], [66.9, 7159.0], [67.0, 7163.0], [67.1, 7177.0], [67.2, 7186.0], [67.3, 7200.0], [67.4, 7218.0], [67.5, 7229.0], [67.6, 7239.0], [67.7, 7261.0], [67.8, 7299.0], [67.9, 7315.0], [68.0, 7319.0], [68.1, 7337.0], [68.2, 7350.0], [68.3, 7384.0], [68.4, 7405.0], [68.5, 7409.0], [68.6, 7449.0], [68.7, 7454.0], [68.8, 7497.0], [68.9, 7549.0], [69.0, 7579.0], [69.1, 7599.0], [69.2, 7617.0], [69.3, 7618.0], [69.4, 7642.0], [69.5, 7659.0], [69.6, 7660.0], [69.7, 7686.0], [69.8, 7732.0], [69.9, 7736.0], [70.0, 7761.0], [70.1, 7788.0], [70.2, 7799.0], [70.3, 7826.0], [70.4, 7837.0], [70.5, 7842.0], [70.6, 7852.0], [70.7, 7869.0], [70.8, 7871.0], [70.9, 7879.0], [71.0, 7892.0], [71.1, 7908.0], [71.2, 7915.0], [71.3, 7932.0], [71.4, 7942.0], [71.5, 7965.0], [71.6, 7975.0], [71.7, 7980.0], [71.8, 7994.0], [71.9, 8024.0], [72.0, 8031.0], [72.1, 8045.0], [72.2, 8094.0], [72.3, 8136.0], [72.4, 8163.0], [72.5, 8178.0], [72.6, 8213.0], [72.7, 8267.0], [72.8, 8285.0], [72.9, 8304.0], [73.0, 8313.0], [73.1, 8321.0], [73.2, 8342.0], [73.3, 8364.0], [73.4, 8372.0], [73.5, 8383.0], [73.6, 8393.0], [73.7, 8407.0], [73.8, 8430.0], [73.9, 8445.0], [74.0, 8452.0], [74.1, 8469.0], [74.2, 8476.0], [74.3, 8480.0], [74.4, 8489.0], [74.5, 8496.0], [74.6, 8504.0], [74.7, 8521.0], [74.8, 8549.0], [74.9, 8554.0], [75.0, 8570.0], [75.1, 8577.0], [75.2, 8586.0], [75.3, 8602.0], [75.4, 8633.0], [75.5, 8643.0], [75.6, 8656.0], [75.7, 8662.0], [75.8, 8664.0], [75.9, 8685.0], [76.0, 8697.0], [76.1, 8703.0], [76.2, 8707.0], [76.3, 8712.0], [76.4, 8721.0], [76.5, 8735.0], [76.6, 8741.0], [76.7, 8743.0], [76.8, 8771.0], [76.9, 8774.0], [77.0, 8783.0], [77.1, 8793.0], [77.2, 8803.0], [77.3, 8813.0], [77.4, 8829.0], [77.5, 8836.0], [77.6, 8865.0], [77.7, 8871.0], [77.8, 8888.0], [77.9, 8893.0], [78.0, 8894.0], [78.1, 8899.0], [78.2, 8910.0], [78.3, 8914.0], [78.4, 8920.0], [78.5, 8925.0], [78.6, 8937.0], [78.7, 8944.0], [78.8, 8950.0], [78.9, 8957.0], [79.0, 8961.0], [79.1, 8968.0], [79.2, 8971.0], [79.3, 8980.0], [79.4, 8993.0], [79.5, 9005.0], [79.6, 9014.0], [79.7, 9024.0], [79.8, 9035.0], [79.9, 9048.0], [80.0, 9057.0], [80.1, 9070.0], [80.2, 9079.0], [80.3, 9080.0], [80.4, 9090.0], [80.5, 9098.0], [80.6, 9113.0], [80.7, 9131.0], [80.8, 9133.0], [80.9, 9136.0], [81.0, 9140.0], [81.1, 9141.0], [81.2, 9148.0], [81.3, 9154.0], [81.4, 9163.0], [81.5, 9181.0], [81.6, 9193.0], [81.7, 9193.0], [81.8, 9202.0], [81.9, 9216.0], [82.0, 9231.0], [82.1, 9242.0], [82.2, 9249.0], [82.3, 9259.0], [82.4, 9265.0], [82.5, 9290.0], [82.6, 9293.0], [82.7, 9317.0], [82.8, 9336.0], [82.9, 9341.0], [83.0, 9366.0], [83.1, 9384.0], [83.2, 9391.0], [83.3, 9409.0], [83.4, 9430.0], [83.5, 9436.0], [83.6, 9442.0], [83.7, 9462.0], [83.8, 9466.0], [83.9, 9468.0], [84.0, 9478.0], [84.1, 9481.0], [84.2, 9484.0], [84.3, 9489.0], [84.4, 9494.0], [84.5, 9500.0], [84.6, 9507.0], [84.7, 9511.0], [84.8, 9515.0], [84.9, 9519.0], [85.0, 9526.0], [85.1, 9540.0], [85.2, 9548.0], [85.3, 9554.0], [85.4, 9569.0], [85.5, 9579.0], [85.6, 9583.0], [85.7, 9612.0], [85.8, 9614.0], [85.9, 9632.0], [86.0, 9672.0], [86.1, 9690.0], [86.2, 9709.0], [86.3, 9714.0], [86.4, 9732.0], [86.5, 9747.0], [86.6, 9758.0], [86.7, 9770.0], [86.8, 9802.0], [86.9, 9813.0], [87.0, 9821.0], [87.1, 9843.0], [87.2, 9849.0], [87.3, 9876.0], [87.4, 9911.0], [87.5, 9929.0], [87.6, 9950.0], [87.7, 9980.0], [87.8, 10042.0], [87.9, 10072.0], [88.0, 10088.0], [88.1, 10098.0], [88.2, 10117.0], [88.3, 10187.0], [88.4, 10233.0], [88.5, 10262.0], [88.6, 10288.0], [88.7, 10301.0], [88.8, 10311.0], [88.9, 10328.0], [89.0, 10344.0], [89.1, 10346.0], [89.2, 10362.0], [89.3, 10394.0], [89.4, 10451.0], [89.5, 10523.0], [89.6, 10580.0], [89.7, 10599.0], [89.8, 10631.0], [89.9, 10647.0], [90.0, 10670.0], [90.1, 10693.0], [90.2, 10740.0], [90.3, 10780.0], [90.4, 10859.0], [90.5, 10871.0], [90.6, 10877.0], [90.7, 10904.0], [90.8, 10930.0], [90.9, 10935.0], [91.0, 10948.0], [91.1, 10970.0], [91.2, 10987.0], [91.3, 11019.0], [91.4, 11067.0], [91.5, 11117.0], [91.6, 11130.0], [91.7, 11141.0], [91.8, 11154.0], [91.9, 11173.0], [92.0, 11190.0], [92.1, 11195.0], [92.2, 11237.0], [92.3, 11253.0], [92.4, 11293.0], [92.5, 11357.0], [92.6, 11401.0], [92.7, 11516.0], [92.8, 11584.0], [92.9, 11684.0], [93.0, 11866.0], [93.1, 12236.0], [93.2, 12247.0], [93.3, 12310.0], [93.4, 12342.0], [93.5, 12345.0], [93.6, 12389.0], [93.7, 12454.0], [93.8, 12463.0], [93.9, 12490.0], [94.0, 12495.0], [94.1, 12560.0], [94.2, 12803.0], [94.3, 12848.0], [94.4, 12871.0], [94.5, 12889.0], [94.6, 12913.0], [94.7, 12926.0], [94.8, 12946.0], [94.9, 12984.0], [95.0, 13018.0], [95.1, 13107.0], [95.2, 13131.0], [95.3, 13206.0], [95.4, 13310.0], [95.5, 13355.0], [95.6, 13385.0], [95.7, 13435.0], [95.8, 13511.0], [95.9, 13539.0], [96.0, 13573.0], [96.1, 13583.0], [96.2, 13594.0], [96.3, 13614.0], [96.4, 13652.0], [96.5, 13713.0], [96.6, 13735.0], [96.7, 13815.0], [96.8, 13874.0], [96.9, 13922.0], [97.0, 13956.0], [97.1, 14046.0], [97.2, 14079.0], [97.3, 14153.0], [97.4, 14195.0], [97.5, 14233.0], [97.6, 14274.0], [97.7, 14279.0], [97.8, 14287.0], [97.9, 14307.0], [98.0, 14415.0], [98.1, 14650.0], [98.2, 14671.0], [98.3, 14700.0], [98.4, 14761.0], [98.5, 14779.0], [98.6, 14811.0], [98.7, 14874.0], [98.8, 14924.0], [98.9, 14952.0], [99.0, 14965.0], [99.1, 15056.0], [99.2, 15066.0], [99.3, 15081.0], [99.4, 15099.0], [99.5, 15109.0], [99.6, 15147.0], [99.7, 15156.0], [99.8, 15181.0], [99.9, 15371.0], [100.0, 15668.0]], "isOverall": false, "label": "HTTP Request_Bodega_Almacenamiento", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 619.0, "series": [{"data": [[0.0, 619.0], [100.0, 65.0], [200.0, 18.0], [300.0, 16.0], [400.0, 5.0], [500.0, 2.0], [600.0, 2.0], [700.0, 3.0], [800.0, 5.0], [900.0, 3.0], [1000.0, 2.0], [1100.0, 4.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 3.0], [1500.0, 4.0], [1600.0, 3.0], [1800.0, 3.0], [1900.0, 3.0], [2100.0, 1.0], [2200.0, 7.0], [2300.0, 11.0], [2400.0, 3.0], [2500.0, 4.0], [2600.0, 6.0], [2800.0, 4.0], [2700.0, 6.0], [2900.0, 7.0], [3000.0, 5.0], [3100.0, 19.0], [3200.0, 73.0], [3300.0, 49.0], [3400.0, 38.0], [3500.0, 18.0], [3600.0, 31.0], [3700.0, 33.0], [3800.0, 31.0], [3900.0, 15.0], [4000.0, 11.0], [4200.0, 7.0], [4100.0, 12.0], [4300.0, 17.0], [4500.0, 19.0], [4600.0, 41.0], [4400.0, 15.0], [4700.0, 22.0], [4800.0, 14.0], [5100.0, 13.0], [5000.0, 17.0], [4900.0, 14.0], [5300.0, 10.0], [5200.0, 7.0], [5600.0, 28.0], [5500.0, 21.0], [5400.0, 4.0], [5700.0, 57.0], [5800.0, 50.0], [6100.0, 18.0], [6000.0, 64.0], [5900.0, 37.0], [6300.0, 15.0], [6200.0, 21.0], [6600.0, 5.0], [6400.0, 2.0], [6500.0, 1.0], [6800.0, 20.0], [6700.0, 10.0], [6900.0, 28.0], [7100.0, 27.0], [7000.0, 41.0], [7400.0, 12.0], [7200.0, 14.0], [7300.0, 15.0], [7500.0, 8.0], [7600.0, 16.0], [7900.0, 20.0], [7700.0, 13.0], [7800.0, 23.0], [8000.0, 10.0], [8100.0, 9.0], [8300.0, 20.0], [8200.0, 9.0], [8700.0, 30.0], [8500.0, 18.0], [8600.0, 22.0], [8400.0, 25.0], [8800.0, 25.0], [8900.0, 34.0], [9000.0, 29.0], [9200.0, 23.0], [9100.0, 34.0], [9300.0, 16.0], [9500.0, 33.0], [9600.0, 11.0], [9700.0, 17.0], [9400.0, 32.0], [9800.0, 16.0], [9900.0, 11.0], [10000.0, 10.0], [10100.0, 5.0], [10200.0, 10.0], [10300.0, 17.0], [10400.0, 3.0], [10500.0, 7.0], [10600.0, 11.0], [10700.0, 7.0], [10900.0, 16.0], [11000.0, 6.0], [11100.0, 17.0], [11200.0, 8.0], [10800.0, 7.0], [11300.0, 5.0], [11500.0, 4.0], [11600.0, 2.0], [11400.0, 2.0], [11700.0, 1.0], [11800.0, 2.0], [12200.0, 5.0], [12100.0, 1.0], [12000.0, 1.0], [12300.0, 9.0], [12400.0, 11.0], [12500.0, 3.0], [12700.0, 1.0], [12800.0, 10.0], [13000.0, 4.0], [12900.0, 10.0], [13300.0, 7.0], [13100.0, 5.0], [13200.0, 2.0], [13400.0, 4.0], [13500.0, 12.0], [13600.0, 7.0], [13700.0, 6.0], [13800.0, 4.0], [13900.0, 6.0], [14000.0, 4.0], [14300.0, 4.0], [14100.0, 5.0], [14200.0, 11.0], [14800.0, 5.0], [14700.0, 8.0], [14600.0, 6.0], [14400.0, 1.0], [14500.0, 1.0], [15200.0, 2.0], [14900.0, 9.0], [15100.0, 10.0], [15000.0, 9.0], [15300.0, 2.0], [15600.0, 1.0]], "isOverall": false, "label": "HTTP Request_Bodega_Almacenamiento", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 1811.0, "series": [{"data": [[0.0, 55.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 1811.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 795.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 151.3713450292397, "minX": 1.67747154E12, "maxY": 401.76507537688457, "series": [{"data": [[1.6774716E12, 234.60913705583755], [1.67747166E12, 401.76507537688457], [1.67747154E12, 151.3713450292397]], "isOverall": false, "label": "Validador", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67747166E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 14794.666666666666, "series": [{"data": [[2.0, 10690.0], [4.0, 129.0], [5.0, 907.4], [6.0, 3625.6666666666665], [8.0, 57.5], [9.0, 1148.6], [10.0, 78.37499999999999], [11.0, 120.22222222222223], [12.0, 589.3636363636364], [13.0, 532.2857142857143], [14.0, 105.4], [15.0, 121.0], [16.0, 120.0], [51.0, 2003.2], [52.0, 3250.6250000000005], [54.0, 2320.0], [56.0, 10626.0], [61.0, 2985.833333333333], [63.0, 2734.5], [64.0, 3151.8571428571427], [70.0, 2618.3333333333335], [68.0, 2760.0], [69.0, 2691.0], [71.0, 2084.5], [73.0, 3875.6666666666665], [72.0, 4573.666666666667], [75.0, 3735.0], [74.0, 4801.2], [77.0, 4257.5], [78.0, 3736.5], [76.0, 3694.0], [79.0, 5368.5], [80.0, 3344.5], [81.0, 4343.75], [90.0, 2673.3333333333335], [91.0, 3150.0], [92.0, 2685.0], [93.0, 2748.6666666666665], [94.0, 4484.333333333333], [95.0, 5308.5], [98.0, 2948.5], [107.0, 3253.0], [110.0, 3555.6], [111.0, 3272.0], [112.0, 3947.5714285714284], [115.0, 4261.5], [113.0, 3587.8], [114.0, 3806.75], [116.0, 3254.0], [119.0, 5226.2], [121.0, 4313.5], [123.0, 4103.0], [120.0, 4658.0], [126.0, 5015.777777777777], [124.0, 5199.0], [127.0, 4353.75], [129.0, 2772.0], [130.0, 4226.4], [135.0, 6027.0], [134.0, 5039.000000000001], [133.0, 5340.555555555556], [132.0, 4643.999999999999], [131.0, 4246.999999999999], [128.0, 3535.0], [138.0, 4779.5], [139.0, 4262.0], [137.0, 4435.571428571428], [136.0, 5384.333333333333], [143.0, 5251.666666666667], [142.0, 4090.25], [141.0, 3082.3333333333335], [140.0, 4027.2], [144.0, 4704.0], [146.0, 5708.166666666666], [145.0, 5058.833333333334], [148.0, 6044.083333333333], [147.0, 3767.6], [149.0, 5389.375], [150.0, 5853.333333333333], [151.0, 5095.571428571428], [152.0, 5044.333333333333], [154.0, 3426.0], [153.0, 8508.75], [156.0, 3457.3333333333335], [157.0, 6616.5], [159.0, 3408.6666666666665], [158.0, 10072.0], [160.0, 3394.0], [161.0, 3328.2], [163.0, 3298.1538461538466], [164.0, 3843.3846153846152], [165.0, 3324.75], [162.0, 3399.6666666666665], [166.0, 3316.0], [167.0, 3269.0], [168.0, 3290.75], [170.0, 3338.666666666667], [169.0, 4646.571428571428], [171.0, 3319.785714285714], [172.0, 3384.1428571428573], [173.0, 3284.6666666666665], [174.0, 3401.75], [175.0, 3431.0], [176.0, 3517.8571428571427], [177.0, 3620.0], [180.0, 3723.3333333333335], [178.0, 3689.3333333333335], [179.0, 3691.75], [182.0, 3798.0], [184.0, 3881.5], [185.0, 3808.0], [186.0, 3802.0], [188.0, 3790.0], [189.0, 3808.9333333333334], [187.0, 3749.5], [190.0, 3770.0], [191.0, 3693.5], [193.0, 3641.0], [194.0, 3593.0], [195.0, 3531.8], [196.0, 3856.166666666667], [197.0, 3647.714285714286], [198.0, 3476.6666666666665], [199.0, 3529.0], [204.0, 6402.583333333333], [205.0, 6619.266666666666], [206.0, 6420.25], [207.0, 6816.153846153847], [203.0, 7104.5], [201.0, 6900.0], [202.0, 4516.571428571428], [200.0, 5853.0], [209.0, 6048.714285714286], [210.0, 7056.142857142858], [212.0, 5314.4], [213.0, 5731.75], [214.0, 5843.454545454545], [215.0, 6642.909090909091], [211.0, 6786.9], [208.0, 7705.000000000001], [219.0, 6288.150000000001], [222.0, 6054.777777777777], [223.0, 7480.241379310345], [221.0, 7390.585365853662], [220.0, 6618.78125], [217.0, 5861.000000000001], [216.0, 6538.8125], [218.0, 6072.3125], [224.0, 7414.971428571428], [231.0, 4311.882352941177], [228.0, 6585.083333333333], [229.0, 7701.444444444444], [230.0, 5222.25], [227.0, 7308.9629629629635], [225.0, 6887.083333333334], [226.0, 6717.461538461538], [232.0, 6815.650000000001], [233.0, 5857.131578947367], [235.0, 4318.571428571429], [237.0, 6335.25], [238.0, 6657.448275862067], [234.0, 4700.500000000002], [236.0, 5995.368421052631], [239.0, 5875.821428571429], [240.0, 4373.900000000001], [246.0, 3051.6857142857143], [244.0, 5753.550000000001], [245.0, 4490.047619047617], [247.0, 3722.970588235295], [242.0, 3939.361111111111], [241.0, 5434.6923076923085], [243.0, 4186.4285714285725], [248.0, 3828.3684210526326], [250.0, 5551.368421052633], [254.0, 6020.156250000001], [253.0, 3188.111111111112], [255.0, 3858.478260869565], [251.0, 5098.879999999998], [252.0, 4934.047619047619], [249.0, 3916.794520547946], [257.0, 5086.454545454545], [258.0, 2299.6], [260.0, 8059.727272727272], [259.0, 4691.454545454546], [261.0, 5083.8], [262.0, 3114.0], [256.0, 4062.272727272727], [264.0, 3135.0], [268.0, 8232.285714285714], [269.0, 12437.277777777777], [270.0, 165.5], [265.0, 2623.6], [266.0, 8039.5], [267.0, 3318.25], [284.0, 34.0], [273.0, 2476.166666666667], [275.0, 81.0], [277.0, 2694.8064516129034], [276.0, 1977.0], [278.0, 17.75], [279.0, 10509.0], [272.0, 9524.0], [285.0, 8.666666666666666], [286.0, 11143.75], [283.0, 7095.4], [282.0, 91.7], [280.0, 3420.875], [281.0, 273.5], [287.0, 193.5], [288.0, 4033.0000000000005], [290.0, 14794.666666666666], [292.0, 14772.0], [294.0, 9626.5], [295.0, 8157.833333333334], [291.0, 18.0], [310.0, 23.0], [308.0, 5.0], [309.0, 5.0], [307.0, 15.0], [312.0, 9.0], [313.0, 10.0], [317.0, 278.0], [314.0, 677.0], [325.0, 6705.0], [326.0, 9989.0], [329.0, 10353.666666666666], [330.0, 10223.0], [333.0, 10859.0], [334.0, 10491.0], [328.0, 4.0], [338.0, 10866.0], [339.0, 11124.0], [347.0, 7620.833333333334], [345.0, 19.0], [342.0, 29.0], [353.0, 11407.0], [352.0, 18.666666666666668], [354.0, 7624.5], [355.0, 4608.4], [356.0, 11281.0], [358.0, 11253.0], [359.0, 11269.5], [360.0, 3834.0], [367.0, 67.0], [364.0, 123.33333333333334], [365.0, 20.0], [366.0, 8979.0], [361.0, 7685.0], [363.0, 7550.125000000001], [368.0, 5947.875], [369.0, 3198.0], [371.0, 78.66666666666667], [372.0, 1566.5], [373.0, 1491.4285714285713], [374.0, 3203.666666666667], [375.0, 39.5], [379.0, 4779.0], [378.0, 5.0], [377.0, 4119.4], [376.0, 1562.5714285714284], [380.0, 828.0], [381.0, 68.5], [382.0, 3933.2], [384.0, 173.0], [386.0, 3483.0], [387.0, 10344.0], [390.0, 8462.4], [397.0, 182.5], [399.0, 1113.0], [396.0, 19.333333333333332], [398.0, 4753.0], [407.0, 10930.0], [403.0, 11195.0], [404.0, 8343.199999999999], [405.0, 10208.0], [409.0, 11198.5], [414.0, 11168.0], [406.0, 10.666666666666666], [402.0, 24.0], [401.0, 9485.5], [417.0, 8297.0], [426.0, 3870.5], [427.0, 8364.0], [428.0, 10.0], [431.0, 6637.0], [423.0, 9980.0], [440.0, 8102.0], [433.0, 36.16666666666667], [432.0, 22.333333333333332], [442.0, 10.0], [441.0, 639.6666666666666], [436.0, 5749.5], [453.0, 70.0], [457.0, 25.5], [448.0, 6917.0], [492.0, 10114.0], [511.0, 9802.0], [510.0, 1334.0], [504.0, 96.0], [508.0, 9838.0], [515.0, 2428.75], [514.0, 13435.0], [523.0, 9758.0], [519.0, 12868.333333333334], [520.0, 14724.5], [521.0, 321.0], [541.0, 558.2631578947369], [518.0, 1582.3684210526312], [536.0, 59.0], [516.0, 5380.5], [517.0, 9017.0], [522.0, 397.0], [556.0, 340.0], [589.0, 7032.0], [638.0, 9540.0], [690.0, 6907.0], [708.0, 237.0], [758.0, 222.0], [794.0, 8803.0], [782.0, 9476.0], [886.0, 9574.0], [883.0, 9579.0], [956.0, 112.0], [955.0, 9544.0], [954.0, 9462.0], [935.0, 9510.0], [963.0, 13107.0], [964.0, 9467.0], [1063.0, 8732.0], [1043.0, 1010.0], [1125.0, 894.0], [1096.0, 8968.0], [1094.0, 9491.0], [1167.0, 7842.0], [1178.0, 7847.5], [1190.0, 7860.0], [1210.0, 25.0], [1206.0, 9448.0], [1249.0, 7925.0], [1283.0, 7965.0], [1313.0, 7459.0], [1335.0, 8163.0], [1365.0, 8178.0], [1396.0, 8267.0], [1401.0, 8234.0], [1398.0, 7686.0], [1456.0, 8554.0], [1451.0, 8306.0], [1454.0, 8436.0], [1433.0, 8111.5], [1417.0, 8504.0], [1421.0, 8656.0], [1415.0, 8521.0], [1437.0, 8473.5], [1439.0, 7732.0], [1449.0, 7748.0], [1490.0, 7934.0], [1553.0, 293.0], [1596.0, 8829.0], [1590.0, 9130.0], [1562.0, 9207.0], [1559.0, 9136.0], [1652.0, 9193.0], [1645.0, 8682.5], [1637.0, 8323.0], [1638.0, 9046.0], [1.0, 5066.0]], "isOverall": false, "label": "HTTP Request_Bodega_Almacenamiento", "isController": false}, {"data": [[263.20473328324584, 5237.440646130725]], "isOverall": false, "label": "HTTP Request_Bodega_Almacenamiento-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1652.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 627.9166666666666, "minX": 1.67747154E12, "maxY": 23743.033333333333, "series": [{"data": [[1.6774716E12, 15175.266666666666], [1.67747166E12, 23743.033333333333], [1.67747154E12, 2508.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6774716E12, 2073.266666666667], [1.67747166E12, 627.9166666666666], [1.67747154E12, 1561.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67747166E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3983.804093567251, "minX": 1.67747154E12, "maxY": 5943.664128595599, "series": [{"data": [[1.6774716E12, 5943.664128595599], [1.67747166E12, 5265.997487437187], [1.67747154E12, 3983.804093567251]], "isOverall": false, "label": "HTTP Request_Bodega_Almacenamiento", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67747166E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3981.942982456137, "minX": 1.67747154E12, "maxY": 5940.973773265648, "series": [{"data": [[1.6774716E12, 5940.973773265648], [1.67747166E12, 4145.169597989956], [1.67747154E12, 3981.942982456137]], "isOverall": false, "label": "HTTP Request_Bodega_Almacenamiento", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67747166E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4.79441624365482, "minX": 1.67747154E12, "maxY": 56.97361809045228, "series": [{"data": [[1.6774716E12, 4.79441624365482], [1.67747166E12, 56.97361809045228], [1.67747154E12, 7.464912280701758]], "isOverall": false, "label": "HTTP Request_Bodega_Almacenamiento", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67747166E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.67747154E12, "maxY": 15668.0, "series": [{"data": [[1.6774716E12, 14048.0], [1.67747166E12, 15668.0], [1.67747154E12, 7599.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6774716E12, 10288.0], [1.67747166E12, 14962.0], [1.67747154E12, 6056.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6774716E12, 13730.74], [1.67747166E12, 15374.84], [1.67747154E12, 7361.649999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6774716E12, 11354.3], [1.67747166E12, 15109.2], [1.67747154E12, 6216.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6774716E12, 3251.0], [1.67747166E12, 7732.0], [1.67747154E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6774716E12, 7797.5], [1.67747166E12, 12342.0], [1.67747154E12, 3716.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67747166E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 1.0, "maxY": 15120.5, "series": [{"data": [[36.0, 10575.0], [38.0, 13525.0], [48.0, 2559.5], [53.0, 14650.0], [55.0, 101.0], [57.0, 10658.5], [79.0, 4487.0], [77.0, 9549.0], [81.0, 6090.0], [91.0, 4669.0], [101.0, 6772.0], [107.0, 5749.0], [118.0, 5749.5], [8.0, 1641.0], [145.0, 9341.0], [163.0, 7319.0], [176.0, 8669.5], [12.0, 7379.5], [14.0, 7852.0], [1.0, 14048.0], [282.0, 3390.0], [18.0, 11188.5], [19.0, 13696.0], [22.0, 12474.0], [24.0, 15120.5], [26.0, 8522.0], [29.0, 11950.0], [30.0, 3837.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 1394.5], [2.0, 5696.0], [1.0, 2182.0], [274.0, 7.0], [19.0, 5743.0], [77.0, 9512.0], [409.0, 21.0], [26.0, 8478.5], [14.0, 7686.0], [57.0, 10362.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 409.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 14845.5, "series": [{"data": [[36.0, 10575.0], [38.0, 13354.5], [48.0, 2559.5], [53.0, 14495.0], [55.0, 101.0], [57.0, 10657.0], [79.0, 4487.0], [77.0, 9494.0], [81.0, 6090.0], [91.0, 4662.0], [101.0, 6770.0], [107.0, 5749.0], [118.0, 5749.0], [8.0, 1639.5], [145.0, 9341.0], [163.0, 7319.0], [176.0, 8669.0], [12.0, 7366.0], [14.0, 7845.0], [1.0, 14048.0], [282.0, 3390.0], [18.0, 11187.5], [19.0, 13693.0], [22.0, 12474.0], [24.0, 14845.5], [26.0, 8520.5], [29.0, 11819.5], [30.0, 3836.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 0.0], [2.0, 0.0], [1.0, 0.0], [274.0, 0.0], [19.0, 0.0], [77.0, 0.0], [409.0, 0.0], [26.0, 0.0], [14.0, 0.0], [57.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 409.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11.4, "minX": 1.67747154E12, "maxY": 19.7, "series": [{"data": [[1.6774716E12, 19.7], [1.67747166E12, 13.266666666666667], [1.67747154E12, 11.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67747166E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.67747154E12, "maxY": 15.133333333333333, "series": [{"data": [[1.6774716E12, 15.133333333333333], [1.67747166E12, 4.583333333333333], [1.67747154E12, 11.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6774716E12, 4.566666666666666], [1.67747166E12, 6.566666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.67747166E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.io.InterruptedIOException", "isController": false}, {"data": [[1.67747166E12, 2.1]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67747166E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.566666666666666, "minX": 1.67747154E12, "maxY": 15.133333333333333, "series": [{"data": [[1.6774716E12, 4.566666666666666], [1.67747166E12, 8.683333333333334]], "isOverall": false, "label": "HTTP Request_Bodega_Almacenamiento-failure", "isController": false}, {"data": [[1.6774716E12, 15.133333333333333], [1.67747166E12, 4.583333333333333], [1.67747154E12, 11.4]], "isOverall": false, "label": "HTTP Request_Bodega_Almacenamiento-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67747166E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.566666666666666, "minX": 1.67747154E12, "maxY": 15.133333333333333, "series": [{"data": [[1.6774716E12, 15.133333333333333], [1.67747166E12, 4.583333333333333], [1.67747154E12, 11.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6774716E12, 4.566666666666666], [1.67747166E12, 8.683333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67747166E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

